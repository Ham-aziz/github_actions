name: Tag, Build, Push Docker Image to ECR or GHCR or both

on:
  push:
    branches:
    - separateJobs


permissions:
  id-token: write
  contents: write
  packages: write

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: my-repo           # set this to your Amazon ECR repository name
  # ECS_SERVICE: [my-service]                # set this to your Amazon ECS service name
  ECS_CLUSTER: niagara                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: [task-definition.json]  # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: my-repo           # set this to the name of the container in the containerDefinitions section of your task definition
  ROLE_TO_ASSUME: "arn:aws:iam::912343663134:role/provideEcrAccess"                                           

jobs:
  create-release:
    name: Creates new release and updates Changelog.md
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}
    steps:
      - uses: actions/checkout@v2

      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: create release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' && github.ref_name == 'main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  build-push:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.out.outputs.image }}
    needs: [create-release]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

        # run only if push-to-ecr is true
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: prepare tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          # generate Docker tags
          tags: | # in order: commit sha, develop, latest and version on main
            type=sha,enable=true,prefix=,suffix=,format=short
            type=raw,value=develop,enable=${{ github.ref_name == 'dev' }}
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=${{ needs.create-release.outputs.tag }},enable=${{ github.ref_name == 'main' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: BUILD_ENV=${{ github.ref_name }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: save the image uri to a file
        run: |
           echo ${{ steps.meta.outputs.tags }} > imageUri.txt

      - name: upload the image id (didnt work with output)
        uses: actions/upload-artifact@v3
        with:
          name: my-image
          path: imageUri.txt
  deploy:
    strategy:
      max-parallel: 4 
      matrix:
        ECS_SERVICE: [my-service, my-service2]
        ECS_TASK_DEFINITION: [demodeploy]
        
    name: deploy
    runs-on: ubuntu-latest
    needs: [build-push]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
       
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: get the image id from the build job
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: my-image

      - name: set output
        id: out
        run: echo "::set-output name=image::$(echo imageUri.txt)"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json # this is the name of the file containing the task definition download from the previous step
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.out.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
